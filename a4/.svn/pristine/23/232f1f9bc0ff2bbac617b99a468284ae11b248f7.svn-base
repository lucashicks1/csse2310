#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <csse2310a4.h>
#include <csse2310a3.h>

#define MAX_ARGS 6
#define MAX_WORD_LENGTH 8
#define MIN_PORT 1024
#define MAX_PORT 65535

#define DEFAULT_DICTIONARY "/usr/share/dict/words"

typedef enum {
    USAGE_ERROR = 1,
    DICT_FILE_ERROR = 2,
    NO_WORDS_ERROR = 3,
    UNABLE_OPEN_ERROR = 4,
    UNABLE_LISTEN_ERROR = 5
} ExitStatus;

typedef struct {
    int maxConns;
    const char* portNum;
    char* dictFileName;
} ServerDetails;

typedef struct {
    char** words;
    int numWords;
} Dictionary;

ServerDetails parse_command_line(int argc, char** argv);
int string_to_number(char* arg);
void validate_port_number(int portNum);
int validate_max_connections(int maxConns);
Dictionary fill_dictionary(char* dictFileName);
void usage_error();
void dictionary_error(char* dictName);
void empty_dictionary_error();

int main(int argc, char** argv) {
    ServerDetails serverDetails;
    Dictionary dictionary;

    serverDetails = parse_command_line(argc, argv);
    dictionary = fill_dictionary(serverDetails.dictFileName);

    // Pass the address of serverDetails

    printf("PROGRAM\n");

    return 0;
}


ServerDetails parse_command_line(int argc, char** argv) {
    ServerDetails param = {.maxConns = -1, .portNum = NULL, 
        .dictFileName = NULL};

    // Skip program name
    argc--;
    argv++;

    if (argc > MAX_ARGS || argc % 2) {
        usage_error();
    }

    while (argc) {
        if (strcmp(argv[0], "--maxconn") == 0 && param.maxConns < 0) {
            int maxConns = string_to_number(argv[1]);
            param.maxConns = validate_max_connections(maxConns);
        } else if (strcmp(argv[0], "--port") == 0 && !param.portNum) {
            int portNum = string_to_number(argv[1]);
            validate_port_number(portNum);
            param.portNum = argv[1];
        } else if (strcmp(argv[0], "--dictionary") == 0 
                && !param.dictFileName) {
            param.dictFileName = argv[1];
        } else {
            usage_error();
        }

        argc -= 2;
        argv += 2;
    }

    if (!param.portNum) {
        param.portNum = "0\0";
    }

    if (!param.dictFileName) {
        param.dictFileName = DEFAULT_DICTIONARY;
    }

    return param;

}

Dictionary fill_dictionary(char* dictName) {
    Dictionary param = {.words = NULL, .numWords = 0};
    param.words = malloc(0);
    char* line;
    
    FILE* dictFileStream = fopen(dictName, "r");

    if (!dictFileStream) {
        free(param.words);
        dictionary_error(dictName);
    }

    while ((line = read_line(dictFileStream))) {
        if (strlen(line) > MAX_WORD_LENGTH) {
            free(line);
            continue;
        }
        param.numWords++;
        param.words = realloc(param.words, param.numWords * sizeof(char*));
        param.words[param.numWords - 1] = line;
    }
    if (!param.numWords) {
        free(param.words);
        empty_dictionary_error();
    }


    return param;
} 

int string_to_number(char* arg) {
    char* end;
    int num;
    num = strtol(arg, &end, 10);

    // Checking if entire string was read and converted
    if (*end != '\0') {
        usage_error();
    } 
    return num;
}

void validate_port_number(int portNum) {
    if (portNum != 0 && (portNum < MIN_PORT || portNum > MAX_PORT)) {
        usage_error();
    }
}

int validate_max_connections(int maxConns) {
    // Checking if negative number given
    if (maxConns < 0) {
        usage_error();
    }
    return maxConns;
}

void usage_error() {
    fprintf(stderr, "Usage: crackserver [--maxconn connections] [--port"\
            "portnum] [--dictionary filename]\n");
    exit(USAGE_ERROR);
}

void dictionary_error(char* dictName) {
    fprintf(stderr, "crackserver: unable to open dictionary file \"%s\"", 
            dictName);
    exit(DICT_FILE_ERROR);
}

void empty_dictionary_error() {
    fprintf(stderr, "crackserver: no plain text words to test\n");
    exit(NO_WORDS_ERROR);
}
