#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <csse2310a4.h>
#include <csse2310a3.h>
#include <stdbool.h>
#include <pthread.h>
#include <crypt.h>
#include <ctype.h>
#include <semaphore.h>
#include <signal.h>
#include <limits.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define MAX_ARGS 6
#define MAX_WORD_LENGTH 8
#define MIN_PORT 1024
#define MAX_PORT 65535
#define MAX_FIELDS 3
#define CIPHER_LENGTH 13
#define SALT_LENGTH 2

#define MIN_THREADS 1
#define MAX_THREADS 50

#define ASCII_MIN 46
#define ASCII_MAX 57

#define FAILED ":failed"
#define INVALID ":invalid"

#define DEFAULT_DICTIONARY "/usr/share/dict/words"

#define STAT_MESSAGE "Connected clients: %u\nCompleted clients: %u\nCrack "\
    "requests: %u\nFailed crack requests: %u\nSuccessful crack requests: %u\n"\
    "Crypt requests: %u\ncrypt()/crypt_r() calls: %u\n"

// Semaphores for statistics

typedef enum {
    USAGE_ERROR = 1,
    DICT_FILE_ERROR = 2,
    NO_WORDS_ERROR = 3,
    UNABLE_OPEN_ERROR = 4,
} ExitStatus;

typedef struct {
    int maxConns;
    const char* portNum;
    char* dictFileName;
} ServerDetails;

typedef struct {
    uint32_t numConnected;
    uint32_t numCompleted;
    uint32_t cracks;
    uint32_t failedCracks;
    uint32_t successCracks;
    uint32_t crypts;
    uint32_t cryptCalls;
    sem_t* lock;
} Statistics;

typedef struct {
    Statistics* stats;
    sigset_t* set;
} StatsThreadData;

typedef struct {
    char** words;
    int numWords;
} Dictionary;

typedef struct {
    int fd;
    Dictionary* dict;
    sem_t* maxConns;
    Statistics* stats;
} ClientThreadData;

typedef struct {
    char* cipherText;
    char* salt;
    char** words;
    int startPos;
    int endPos;
} CrackThreadData;

typedef struct {
    char* word;
    int numCalls;
} CrackThreadReturn;

// Main functions
ServerDetails parse_command_line(int argc, char** argv);
void process_connections(int serv, Dictionary dict, int maxConns);
int open_listen(const char* port);
void process_command(char* command, FILE* out, Dictionary* dict,
        Statistics* stats);

// Client Handler
void* client_wrapper(void* v);
void client_handler_thread(int fd, Dictionary* dict, sem_t* maxConns,
        Statistics* stats);

// Crypt/Crack Calls
char* crypt_call(char* cryptText, char* salt);
char* crack_call(char* cipherText, int numThreads, Dictionary* dict,
        Statistics* stats);
void* crack_thread_wrapper(void* v);
void* crack_thread(void* v);

//Helper prototypes
void validate_port_number(int portNum);
int validate_max_connections(int maxConns);
Dictionary fill_dictionary(char* dictFileName);
void free_dictionary(Dictionary);
int string_to_number(char* arg);
bool valid_thread_num(char* numThreads);
bool valid_salt(char* salt);
bool valid_salt_character(char salt);
CrackThreadData* create_crack_thread_data(char* cipherText, char* salt,
        char** words, int startPos, int endPos);

// Stats commands
void* stats_thread(void* v);
void stats_add_connection(Statistics* stats);
void stats_complete_connection(Statistics* stats);
void stats_add_crack_request(Statistics* stats);
void stats_add_crack_request_pass(Statistics* stats);
void stats_add_crack_request_fail(Statistics* stats);
void stats_add_crypt_request(Statistics* stats);
void stats_add_crypt_call(Statistics* stats, int num);

// Prototypes for error functions
void usage_error();
void dictionary_error(char* dictName);
void empty_dictionary_error();
void unable_listen_error();

int main(int argc, char** argv) {
    ServerDetails serverDetails;
    Dictionary dictionary;
    int serv;

    serverDetails = parse_command_line(argc, argv);
    dictionary = fill_dictionary(serverDetails.dictFileName);

    if ((serv = open_listen(serverDetails.portNum)) < 0) {
        free_dictionary(dictionary);
        unable_listen_error();
    }

    process_connections(serv, dictionary, serverDetails.maxConns);

    return 0;
}

ServerDetails parse_command_line(int argc, char** argv) {
    ServerDetails param = {.maxConns = -1, .portNum = NULL, 
        .dictFileName = NULL};

    // Skip program name
    argc--;
    argv++;

    if (argc > MAX_ARGS || argc % 2) {
        usage_error();
    }

    while (argc) {
        if (strcmp(argv[0], "--maxconn") == 0 && param.maxConns < 0) {
            int maxConns = string_to_number(argv[1]);
            param.maxConns = validate_max_connections(maxConns);
        } else if (strcmp(argv[0], "--port") == 0 && !param.portNum) {
            int portNum = string_to_number(argv[1]);
            validate_port_number(portNum);
            param.portNum = argv[1];
        } else if (strcmp(argv[0], "--dictionary") == 0 
                && !param.dictFileName) {
            param.dictFileName = argv[1];
        } else {
            usage_error(); // If additional or duplicates args are provided
        }

        argc -= 2;
        argv += 2;
    }

    // Sets portnum to be 0 if not specified
    if (!param.portNum) {
        param.portNum = "0";
    }
    // Uses default dictionary if not specified
    if (!param.dictFileName) {
        param.dictFileName = DEFAULT_DICTIONARY;
    }

    return param;

}

// Listens on given port, returns socket for listening
int open_listen(const char* port) {
    struct addrinfo* ai = 0;
    struct addrinfo hints;

    memset(&hints, 0, sizeof(struct addrinfo));
    hints.ai_family = AF_INET;   // IPv4
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;    // listen on all IP addresses

    int err;
    if ((err = getaddrinfo(NULL, port, &hints, &ai))) {
        freeaddrinfo(ai);
        return 1;   // Could not determine address
    }

    // Create a socket and bind it to a port
    int listenfd = socket(AF_INET, SOCK_STREAM, 0); // 0=default protocol (TCP)

    // Allow address (port number) to be reused immediately
    int v = 1;
    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &v, sizeof(v)) < 0) {
        return -1;
    }

    if (bind(listenfd, ai->ai_addr, sizeof(struct sockaddr)) < 0) {
        return -1;
    }

    if (listen(listenfd, 10) < 0) {
        return -1;
    }

    // Find out which socket
    struct sockaddr_in ad;
    memset(&ad, 0, sizeof(struct sockaddr_in));
    socklen_t len = sizeof(struct sockaddr_in);
    if (getsockname(listenfd, (struct sockaddr*)&ad, &len)) {
        perror("sockname");
        return -1;
    }
    printf("%u\n", ntohs(ad.sin_port));

    // Have listening socket - return it
    return listenfd;
}

Statistics* configure_stats() {
    Statistics* stats = malloc(sizeof(Statistics));

    //Zeroes out all the stats
    stats->numConnected = 0;
    stats->numCompleted = 0;
    stats->cracks = 0;
    stats->failedCracks = 0;
    stats->successCracks = 0;
    stats->crypts = 0;
    stats->cryptCalls = 0;

    //Creates the lock
    stats->lock = malloc(sizeof(sem_t));
    sem_init(stats->lock, 0, 1);
    return stats;
}

void* stats_thread(void* v) {
    StatsThreadData* data = (StatsThreadData*)v;
    Statistics* stats = data->stats;
    int sig;

    while (1) {
        sigwait(data->set, &sig); //Wait until SIGHUP is received
        fprintf(stderr, STAT_MESSAGE, stats->numConnected, stats->numCompleted,
                stats->cracks, stats->failedCracks, stats->successCracks,
                stats->crypts, stats->cryptCalls);
        fflush(stderr);
    }
    return NULL;
}

void process_connections(int serv, Dictionary dict, int maxConns) {
    int fd;
    struct sockaddr_in fromAddr;
    socklen_t fromAddrSize;
    pthread_t threadID;

    Statistics* stats = configure_stats();

    sigset_t set;
    sigemptyset(&set); 
    sigaddset(&set, SIGHUP); //Add SIGHUP to signal set
    pthread_sigmask(SIG_BLOCK, &set, NULL); // mask SIGHUP for other threads

    StatsThreadData* statsThreadData = malloc(sizeof(StatsThreadData));
    statsThreadData->stats = stats;
    statsThreadData->set = &set;

    pthread_create(&threadID, 0, stats_thread, statsThreadData);
    pthread_detach(threadID); // Don't need stats thread return value
    
    sem_t maxConnsLock;
    if (maxConns <= 0) {
        maxConns = SEM_VALUE_MAX;
    }
    sem_init(&maxConnsLock, 0, maxConns);

    // Repeatedly accept connections
    while (1) {
        fromAddrSize = sizeof(struct sockaddr_in);

        sem_wait(&maxConnsLock); // Handles max connections
        fd = accept(serv, (struct sockaddr*)&fromAddr, &fromAddrSize);

        if (fd < 0) {
            perror("Error accepting connection");
            exit(1);
        }
        stats_add_connection(stats); // Add 1 to connected stat

        ClientThreadData* data = malloc(sizeof(ClientThreadData));
        data->fd = fd;
        data->dict = &dict;
        data->maxConns = &maxConnsLock;
        data->stats = stats;

        pthread_create(&threadID, 0, client_wrapper, data);
        pthread_detach(threadID); // Don't need client thread return value
    }
}

void* client_wrapper(void* v) {
    ClientThreadData* data = (ClientThreadData*)v;
    client_handler_thread(data->fd, data->dict, data->maxConns, data->stats);
    
    return NULL;
}

void client_handler_thread(int fd, Dictionary* dict, sem_t* maxConns,
        Statistics* stats) {
    char* line;
    int fd2 = dup(fd);
    FILE* in = fdopen(fd, "r");
    FILE* out = fdopen(fd2, "w");

    while ((line = read_line(in))) {
        process_command(line, out, dict, stats);
    }
    
    // Once done, allow another client connection and remove 1 from 
    // current connected clients stat
    sem_post(maxConns);
    stats_complete_connection(stats);

    fclose(in);
    fclose(out);
    close(fd2);
    close(fd);
}

void process_command(char* command, FILE* out, Dictionary* dict,
        Statistics* stats) {
    char** parts = split_by_char(command, ' ', MAX_FIELDS);
    char* result;

    if (parts[0] == NULL || parts[1] == NULL || parts[2] == NULL) {
        result = INVALID;
    } else if (strcmp(parts[0], "crack") == 0) {
        stats_add_crack_request(stats);
        // Check if ciphertext length valid, number of threads valid
        if (strlen(parts[1]) != CIPHER_LENGTH || !valid_thread_num(parts[2])) {
            result = INVALID;
        // Checks if salt in substring is valid
        } else if (!(valid_salt_character(parts[1][0]) && 
                valid_salt_character(parts[1][1]))) {
            result = INVALID;
        } else {
            result = crack_call(parts[1], atoi(parts[2]), dict, stats);
        }
    } else if (strcmp(parts[0], "crypt") == 0) {
        stats_add_crypt_request(stats);
        // Checking salt
        if (!valid_salt(parts[2])) {
            result = INVALID;
        } else {
            result = crypt_call(parts[1], parts[2]);
            stats_add_crypt_call(stats, 1);
        }
    } else {
        result = INVALID;
    }

    fprintf(out, "%s\n", result);
    fflush(out);
}

CrackThreadData* create_crack_thread_data(char* cipherText, char* salt,
        char** words, int startPos, int endPos) {
    CrackThreadData* data = malloc(sizeof(CrackThreadData));
    // Packages up crack thread data struct
    data->cipherText = cipherText;
    data->salt = salt;
    data->words = words;
    data->startPos = startPos;
    data->endPos = endPos;

    return data;
}

char* crack_call(char* cipherText, int numThreads, Dictionary* dict,
        Statistics* stats) {
    CrackThreadReturn* crackReturned;
    char* result = NULL;

    // Extract salt from cipher text
    char* salt = malloc(sizeof(char) * (SALT_LENGTH + 1));
    strncpy(salt, cipherText, SALT_LENGTH);

    // Dictionary start and end points
    int startPos = 0;
    int endPos;
    int increment = 0;

    //Calculate start and end points
    if (dict->numWords < numThreads || numThreads == 1) {
        endPos = dict->numWords;
        numThreads = 1; //Only one thread used
    } else {
        increment = dict->numWords / numThreads;
        endPos = increment;
    }

    pthread_t tids[numThreads]; // Store all of the thread ids
    for (int i = 0; i < numThreads; i++) {
        if ((numThreads - 1) == i) {
            endPos = dict->numWords;
        }
        // Creating each thread
        CrackThreadData* data = create_crack_thread_data(cipherText, salt,
                dict->words, startPos, endPos); 
        pthread_create(&tids[i], 0, crack_thread, data);
        startPos += increment;
        endPos += increment;
    }

    for (int i = 0; i < numThreads; i++) {
        pthread_join(tids[i], (void**) &crackReturned);
        stats_add_crypt_call(stats, crackReturned->numCalls);
        if (crackReturned->word != NULL) {
            stats_add_crack_request_pass(stats);
            result = crackReturned->word;
        }
    }

    if (result == NULL) {
        stats_add_crack_request_fail(stats);
        result = FAILED;
    }
    return result;
}

void* crack_thread(void* v) {

    // Unwrapping done in the function
    CrackThreadData* crackData = (CrackThreadData*)v;

    CrackThreadReturn* crackReturned = malloc(sizeof(crackReturned));
    crackReturned->word = NULL;
    crackReturned->numCalls = 0;

    char* hash;

    struct crypt_data data;
    // Zero the entire data struct
    memset(&data, 0, sizeof(struct crypt_data));

    for (int i = crackData->startPos; i < crackData->endPos; i++) {
        hash = crypt_r(crackData->words[i], crackData->salt, &data);
        crackReturned->numCalls++;
        if (strcmp(hash, crackData->cipherText) == 0) {
            crackReturned->word = crackData->words[i];
            return (void*) crackReturned;
        }
    }
    return (void*) crackReturned;
}

char* crypt_call(char* cryptText, char* salt) {
    char* hash;
    // Create crypt struct in order to use crypt_r (reentrant version)
    struct crypt_data data;
    // Zero the entire data struct
    memset(&data, 0, sizeof(struct crypt_data));
    hash = crypt_r(cryptText, salt, &data);
    return hash;
}

void stats_add_connection(Statistics* stats) {
    sem_wait(stats->lock);
    stats->numConnected++;
    sem_post(stats->lock);
}

void stats_complete_connection(Statistics* stats) {
    sem_wait(stats->lock);
    stats->numConnected--;
    stats->numCompleted++;
    sem_post(stats->lock);
}

void stats_add_crack_request(Statistics* stats) {
    sem_wait(stats->lock);
    stats->cracks++;
    sem_post(stats->lock);
}

void stats_add_crypt_request(Statistics* stats) {
    sem_wait(stats->lock);
    stats->crypts++;
    sem_post(stats->lock);
}

void stats_add_crypt_call(Statistics* stats, int num) {
    sem_wait(stats->lock);
    stats->cryptCalls += num;
    sem_post(stats->lock);
}

void stats_add_crack_request_pass(Statistics* stats) {
    sem_wait(stats->lock);
    stats->successCracks++;
    sem_post(stats->lock);
}

void stats_add_crack_request_fail(Statistics* stats) {
    sem_wait(stats->lock);
    stats->failedCracks++;
    sem_post(stats->lock);
}

bool valid_salt(char* salt) {
    // Check the length of the salt
    if (strlen(salt) != SALT_LENGTH) {
        return false;
    }

    // Check that each char in the salt is valid
    for (int i = 0; i < SALT_LENGTH; i++) {
        if (!valid_salt_character(salt[i])) {
            return false;
        }
    }
    return true;
}

// Checking if the salt is a valid character
// ASCII values are used to check if number or . or /
bool valid_salt_character(char salt) {
    return isalpha(salt) || (((salt >= ASCII_MIN) && (salt <= ASCII_MAX)));
}

bool valid_thread_num(char* numThreads) {
    // Not using string_to_number as 0 is a false thread num
    int num = atoi(numThreads);
    if (num < MIN_THREADS || num > MAX_THREADS) {
        return false;
    }
    return true;
}

Dictionary fill_dictionary(char* dictName) {
    Dictionary param = {.words = NULL, .numWords = 0};
    param.words = malloc(0);
    char* line;
    
    FILE* dictFileStream = fopen(dictName, "r");

    if (!dictFileStream) {
        free(param.words);
        dictionary_error(dictName);
    }
    // TODO Why do i have to consider if words are no longer than 50 chars
    while ((line = read_line(dictFileStream))) {
        if (strlen(line) > MAX_WORD_LENGTH) {
            free(line);
            continue;
        }
        param.numWords++;
        param.words = realloc(param.words, param.numWords * sizeof(char*));
        param.words[param.numWords - 1] = line;
    }
    if (!param.numWords) {
        free(param.words);
        empty_dictionary_error();
    }


    return param;
} 

void free_dictionary(Dictionary dict) {
    for (int i = 0; i < dict.numWords; i++) {
        free(dict.words[i]);
    }
    free(dict.words);
}

int string_to_number(char* arg) {
    char* end;
    int num;
    num = strtol(arg, &end, 10);

    // Checking if entire string was read and converted
    if (*end != '\0') {
        usage_error();
    } 
    return num;
}

void validate_port_number(int portNum) {
    if (portNum != 0 && (portNum < MIN_PORT || portNum > MAX_PORT)) {
        usage_error();
    }
}

int validate_max_connections(int maxConns) {
    // Checking if negative number given
    if (maxConns < 0) {
        usage_error();
    }
    return maxConns;
}

void usage_error() {
    fprintf(stderr, "Usage: crackserver [--maxconn connections] [--port "\
            "portnum] [--dictionary filename]\n");
    exit(USAGE_ERROR);
}

void dictionary_error(char* dictName) {
    fprintf(stderr, "crackserver: unable to open dictionary file \"%s\"\n", 
            dictName);
    exit(DICT_FILE_ERROR);
}

void empty_dictionary_error() {
    fprintf(stderr, "crackserver: no plain text words to test\n");
    exit(NO_WORDS_ERROR);
}

void unable_listen_error() {
    fprintf(stderr, "crackserver: unable to open socket for listening\n");
    exit(UNABLE_OPEN_ERROR);
}
